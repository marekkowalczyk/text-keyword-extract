#!/usr/bin/env python3

# import os  # Import the os module for working with environment variables
import openai  # Import the OpenAI module for working with the OpenAI API
import json  # Import the json module for working with JSON data
import sys  # Import the sys module for working with command-line arguments
from read_yaml import get_api_key_value

# openai.api_key = os.getenv("OPENAI_API_KEY")  # Set the OpenAI API key from an environment variable
openai.api_key = get_api_key_value('whisper_01') # Set the OpenAI API key 

filename = sys.argv[1]  # Get the filename from the command-line arguments

with open(filename, "r") as file:  # Open the file in read-only mode
    file_contents = file.read()  # Read the contents of the file into a string variable

prompt_text = "Extract three to five most relevant keywords from the following text. List the extracted keywords as a comma-delimited list. Make sure every keyword is listed separately and surrounded by commas. Make sure the keywords are not sentences but short phrases consisting of nouns, adjectives and gerunds. List the keywords in order of relevance, from the most relevant to the least relevant.\n\n" + file_contents  # Create the prompt text by concatenating a fixed string with the contents of the file

response = openai.Completion.create(  # Call the OpenAI API to generate the response
  model="text-davinci-003",  # Use the Davinci model for text generation
  prompt=prompt_text,  # Use the prompt text we created earlier
  temperature=0.5,  # Set the temperature to control the randomness of the generated text
  max_tokens=100,  # Set the maximum number of tokens to generate
  top_p=1,  # Set the top p-value to control the diversity of the generated text
  best_of=3, # The API generates three independent completions with the same prompt and settings, and then returns the one that is deemed to be the best based on its internal ranking system
  frequency_penalty=0.8,  # Set the frequency penalty to encourage diversity in the generated text
  presence_penalty=0.0  # Set the presence penalty to encourage relevance in the generated text
)

response_json = json.dumps(response.to_dict())  # Convert the OpenAIObject to a JSON-formatted string
response_dict = json.loads(response_json)  # Convert the JSON-formatted string to a Python dictionary
text = response_dict["choices"][0]["text"]  # Extract the generated text from the dictionary
print(text)  # Print the generated text to the console
